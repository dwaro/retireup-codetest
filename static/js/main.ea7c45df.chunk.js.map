{"version":3,"sources":["components/Formatter.js","components/Intro.js","components/data-table/Slider.js","components/data-table/DataTable.js","components/App.js","index.js"],"names":["Formatter","props","$","document","width","className","data","Intro","style","textAlign","paddingBottom","borderBottom","letterSpacing","lineHeight","Slider","state","start","end","Range","RcSlider","createSliderWithTooltip","updateYears","bind","this","setState","val","float","fontWeight","min","max","defaultValue","tipFormatter","value","onChange","onSlide","Component","DataTable","sort","a","b","year","currentStart","currentEnd","handleSliderUpdate","length","num","str","toString","cumulativeReturn","borderSpacing","slice","map","parseFloat","totalReturn","Number","toFixed","cumulativeDisplay","formatNumber","negative","key","color","App","href","target","rel","renderContent","ReactDOM","render","StrictMode","getElementById"],"mappings":"kOAmBeA,EATG,SAACC,GAEjB,OADkBC,IAAEC,UAAUC,SACV,IAClB,yBAAKC,UAAU,OAAOJ,EAAMK,MAE5B,yBAAKD,UAAU,UAAUJ,EAAMK,OCapBC,EAvBD,WACZ,OACE,6BACE,wBACEC,MAAO,CACLC,UAAW,SACXC,cAAe,GACfC,aAAc,oBAJlB,yBAQA,0BAAMH,MAAO,CAAEI,cAAe,MAAOC,WAAY,SAAjD,+EAEM,4CAFN,4HAIa,iDAJb,iI,gBCiESC,G,yDAzEb,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IACDc,MAAQ,CACXC,OAAQ,EACRC,KAAM,EACNC,MAAOC,IAASC,wBAAwBD,IAASD,QAEnD,EAAKG,YAAc,EAAKA,YAAYC,KAAjB,gBAPF,E,kEAcS,IAAtBC,KAAKR,MAAMC,QAAoC,IAApBO,KAAKR,MAAME,MACd,IAAtBM,KAAKtB,MAAMe,QAAoC,IAApBO,KAAKtB,MAAMgB,KACxCM,KAAKC,SAAS,CACZR,MAAOO,KAAKtB,MAAMe,MAClBC,IAAKM,KAAKtB,MAAMgB,Q,kCAUZQ,GACV,IAAMT,EAAQS,EAAI,GACZR,EAAMQ,EAAI,GAChBF,KAAKC,SAAS,CACZR,QACAC,U,+BAIM,IAAD,OACP,OAA0B,IAAtBM,KAAKR,MAAMC,QAAoC,IAApBO,KAAKR,MAAME,IACjC,8BAGL,yBAAKZ,UAAU,UAEb,6BACE,yBAAKG,MAAO,CAAEkB,MAAO,OAAQC,WAAY,SACtCJ,KAAKR,MAAMC,OAEd,yBAAKR,MAAO,CAAEkB,MAAO,QAASC,WAAY,SACvCJ,KAAKR,MAAME,MAGhB,6BACA,6BAEA,6BACE,uBAAMF,MAAMG,MAAZ,CACEU,IAAKL,KAAKtB,MAAMe,MAChBa,IAAKN,KAAKtB,MAAMgB,IAChBa,aAAc,CAACP,KAAKtB,MAAMe,MAAOO,KAAKtB,MAAMgB,KAC5Cc,aAAc,SAACC,GAAD,gBAAcA,IAC5BC,SAAU,SAACR,GACT,EAAKJ,YAAYI,GACjB,EAAKxB,MAAMiC,QAAQT,Y,GAhEdU,c,QCuGNC,E,kDAnGb,WAAYnC,GAAQ,IAAD,8BACjB,cAAMA,IACDc,MAAQ,CACXT,KAAMA,EAAK+B,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEE,KAAOD,EAAEC,KAAO,GAAK,KAClDxB,OAAQ,EACRC,KAAM,EACNwB,cAAe,EACfC,YAAa,GAEf,EAAKC,mBAAqB,EAAKA,mBAAmBrB,KAAxB,gBATT,E,gEAgBjB,IAAMN,EAAQO,KAAKR,MAAMT,KAAK,GAAGkC,KAC3BvB,EAAMM,KAAKR,MAAMT,KAAKiB,KAAKR,MAAMT,KAAKsC,OAAS,GAAGJ,KACxDjB,KAAKC,SAAS,CACZR,MAAOA,EACPC,IAAKA,EACLwB,aAAczB,EACd0B,WAAYzB,M,yCAQGe,GACjBT,KAAKC,SAAS,CACZiB,aAAcT,EAAM,GACpBU,WAAYV,EAAM,O,mCAQTa,GACX,IAAIC,EAAMD,EAAIE,WAId,MAH4B,MAAxBD,EAAIA,EAAIF,OAAS,KACnBE,GAAO,KAEFA,I,+BAGC,IAAD,OACHE,EAAmB,EACvB,OACE,6BACE,kBAAC,EAAD,CACEhC,MAAOO,KAAKR,MAAMC,MAClBC,IAAKM,KAAKR,MAAME,IAChBiB,QAASX,KAAKoB,qBAGhB,yBAAKtC,UAAU,SACb,2BAAOG,MAAO,CAAEJ,MAAO,OAAQ6C,cAAe,IAC5C,+BACE,4BACE,oCACA,4CACA,oDAGJ,+BACG1B,KAAKR,MAAMT,KACT4C,MACC3B,KAAKR,MAAM0B,aAAelB,KAAKR,MAAMC,MACrCO,KAAKR,MAAM2B,WAAa,EAAInB,KAAKR,MAAMC,OAExCmC,KAAI,SAAC7C,GACJ0C,GAAoBI,WAAW9C,EAAK+C,aACpCL,EAAmBM,OAAON,EAAiBO,QAAQ,IACnD,IAAMC,EAAoB,EAAKC,aAAaT,GACtCU,EAAWN,WAAW9C,EAAK+C,aAAe,EAChD,OACE,wBAAIM,IAAKrD,EAAKkC,MACZ,4BAAKlC,EAAKkC,MACTkB,EACC,wBAAIlD,MAAO,CAAEoD,MAAO,QAAUtD,EAAK+C,aAEnC,4BAAK/C,EAAK+C,aAEZ,4BAAKG,e,GAxFHrB,aC0BT0B,E,8KAxBX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,6BACA,6BACA,yBAAKrD,MAAO,CAAEC,UAAW,WAAzB,iDACiD,IAC/C,uBACEqD,KAAK,4CACLC,OAAO,SACPC,IAAI,uBAHN,uB,+BAYN,OAAO,kBAAC,EAAD,CAAW1D,KAAMiB,KAAK0C,sB,GAtBf9B,aCLlB+B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjE,SAASkE,eAAe,U","file":"static/js/main.ea7c45df.chunk.js","sourcesContent":["import React from 'react';\n\n// Components\nimport $ from 'jquery';\n\n/**\n * Initial formatting for screen size from initial loading of page.\n *\n * @param {*} props - props from App, contains data to display in its body\n */\nconst Formatter = (props) => {\n  const pageWidth = $(document).width();\n  return pageWidth >= 600 ? (\n    <div className='web'>{props.data}</div>\n  ) : (\n    <div className='mobile'>{props.data}</div>\n  );\n};\n\nexport default Formatter;\n","import React from 'react';\n\n/**\n * Introduction to the page\n */\nconst Intro = () => {\n  return (\n    <div>\n      <h2\n        style={{\n          textAlign: 'center',\n          paddingBottom: 20,\n          borderBottom: 'solid 1px black',\n        }}>\n        S&P 500 Total Returns\n      </h2>\n      <span style={{ letterSpacing: '2px', lineHeight: '22px' }}>\n        The S&P 500 index is shown below, with years listed in ascending order.\n        The <i>Total Returns</i> column lists the combination of returns\n        generated by dividends and returns generated by price changes in the\n        index. The <i>Cumulative Returns</i> consist of the sum of the returns\n        from the start year indicated by the slider, up to the end year\n        indicated by the slider.\n      </span>\n    </div>\n  );\n};\n\nexport default Intro;\n","import React, { Component } from 'react';\nimport RcSlider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\n/**\n * This class renders the slider Range component\n */\nclass Slider extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      start: -1,\n      end: -1,\n      Range: RcSlider.createSliderWithTooltip(RcSlider.Range),\n    };\n    this.updateYears = this.updateYears.bind(this);\n  }\n\n  /**\n   * Update state start and end years once component has finished first rendering\n   */\n  componentDidUpdate() {\n    if (this.state.start === -1 && this.state.end === -1) {\n      if (this.props.start !== -1 && this.props.end !== -1) {\n        this.setState({\n          start: this.props.start,\n          end: this.props.end,\n        });\n      }\n    }\n  }\n\n  /**\n   * Update state to match new slider year values\n   * @param {*} val - new year values from slider\n   */\n  updateYears(val) {\n    const start = val[0];\n    const end = val[1];\n    this.setState({\n      start,\n      end,\n    });\n  }\n\n  render() {\n    if (this.state.start === -1 && this.state.end === -1) {\n      return <div></div>; // component not ready to render\n    } else {\n      return (\n        <div className='slider'>\n          {/* Render years above slider */}\n          <div>\n            <div style={{ float: 'left', fontWeight: 'bold' }}>\n              {this.state.start}\n            </div>\n            <div style={{ float: 'right', fontWeight: 'bold' }}>\n              {this.state.end}\n            </div>\n          </div>\n          <br />\n          <br />\n          {/* Render slider */}\n          <div>\n            <this.state.Range\n              min={this.props.start}\n              max={this.props.end}\n              defaultValue={[this.props.start, this.props.end]}\n              tipFormatter={(value) => `${value}`}\n              onChange={(val) => {\n                this.updateYears(val); // update years for slider\n                this.props.onSlide(val); // update years for data table\n              }}\n            />\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Slider;\n","import React, { Component } from 'react';\n\n// Components\nimport Slider from './Slider';\nimport data from '../../data/sp500_returns.json';\n\n/**\n * This component handles rendering the slider and the table. It does all of the\n * work with the data.\n */\nclass DataTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: data.sort((a, b) => (a.year > b.year ? 1 : -1)),\n      start: -1, // initial start year from data\n      end: -1, // initial end year from data\n      currentStart: -1, // slider start\n      currentEnd: -1, // slider end\n    };\n    this.handleSliderUpdate = this.handleSliderUpdate.bind(this);\n  }\n\n  /**\n   * Initialize start and end with mount\n   */\n  componentDidMount() {\n    const start = this.state.data[0].year;\n    const end = this.state.data[this.state.data.length - 1].year;\n    this.setState({\n      start: start,\n      end: end,\n      currentStart: start,\n      currentEnd: end,\n    });\n  }\n\n  /**\n   * update slider years\n   */\n\n  handleSliderUpdate(value) {\n    this.setState({\n      currentStart: value[0],\n      currentEnd: value[1],\n    });\n  }\n\n  /**\n   * Format the cumulative returns to always use precision to second decimal place\n   * @param {*} num - cumulativeReturns float\n   */\n  formatNumber(num) {\n    let str = num.toString();\n    if (str[str.length - 3] !== '.') {\n      str += '0';\n    }\n    return str;\n  }\n\n  render() {\n    let cumulativeReturn = 0.0;\n    return (\n      <div>\n        <Slider\n          start={this.state.start}\n          end={this.state.end}\n          onSlide={this.handleSliderUpdate}\n        />\n        {/* Render data table */}\n        <div className='table'>\n          <table style={{ width: '100%', borderSpacing: 0 }}>\n            <thead>\n              <tr>\n                <th>Year</th>\n                <th>Total Return</th>\n                <th>Cumulative Returns</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.state.data\n                .slice(\n                  this.state.currentStart - this.state.start,\n                  this.state.currentEnd + 1 - this.state.start\n                )\n                .map((data) => {\n                  cumulativeReturn += parseFloat(data.totalReturn);\n                  cumulativeReturn = Number(cumulativeReturn.toFixed(2));\n                  const cumulativeDisplay = this.formatNumber(cumulativeReturn);\n                  const negative = parseFloat(data.totalReturn) < 0.0;\n                  return (\n                    <tr key={data.year}>\n                      <td>{data.year}</td>\n                      {negative ? (\n                        <td style={{ color: 'red' }}>{data.totalReturn}</td>\n                      ) : (\n                        <td>{data.totalReturn}</td>\n                      )}\n                      <td>{cumulativeDisplay}</td>\n                    </tr>\n                  );\n                })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DataTable;\n","import React, { Component } from 'react';\n\n// Components\nimport Formatter from './Formatter';\nimport Intro from './Intro';\nimport DataTable from './data-table/DataTable';\n\n/**\n * Main layout of retireup-codetest app\n */\nclass App extends Component {\n  renderContent() {\n    return (\n      <div>\n        <Intro />\n        <DataTable />\n        <br />\n        <br />\n        <div style={{ textAlign: 'center' }}>\n          The data to populate this chart is credited to{' '}\n          <a\n            href='https://www.slickcharts.com/sp500/returns'\n            target='_blank'\n            rel='noopener noreferrer'>\n            slickcharts.com\n          </a>\n        </div>\n      </div>\n    );\n  }\n  render() {\n    // format the screen size at the initial load\n    return <Formatter data={this.renderContent()} />;\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}